/* Gubbins.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Gubbins.java */
package Gubbins.Parser;
import ast.*;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class Gubbins/*@bgen(jjtree)*/implements GubbinsTreeConstants, GubbinsConstants {/*@bgen(jjtree)*/
  protected static JJTGubbinsState jjtree = new JJTGubbinsState();

/** Top level production. */
  static final public List<IASTStatement> Input() throws ParseException {/*@bgen(jjtree) Input */
    SimpleNode jjtn000 = new SimpleNode(JJTINPUT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);List<IASTStatement> result;
    try {
      result = Statements();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTStatement Statement() throws ParseException {/*@bgen(jjtree) Statement */
    SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTStatement s;
    try {
      if (jj_2_1(2)) {
        s = Assignment();
        jj_consume_token(SEMI);
jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
{if ("" != null) return s;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PRINT:{
          jj_consume_token(PRINT);
          s = Print();
          jj_consume_token(SEMI);
jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
{if ("" != null) return s;}
          break;
          }
        case DO:{
          s = DoWhileLoop();
jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
{if ("" != null) return s;}
          break;
          }
        case FOR:{
          s = ForLoop();
jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
{if ("" != null) return s;}
          break;
          }
        case WHILE:{
          s = WhileLoop();
jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
{if ("" != null) return s;}
          break;
          }
        case IF:{
          s = If();
jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
{if ("" != null) return s;}
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public List<IASTStatement> Statements() throws ParseException {/*@bgen(jjtree) Statements */
    SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTStatement s;
    LinkedList<IASTStatement> result = new LinkedList<IASTStatement>();
    try {
      label_1:
      while (true) {
        s = Statement();
result.add(s);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHILE:
        case IF:
        case FOR:
        case PRINT:
        case DO:
        case TYPE_INT:
        case TYPE_DOUBLE:
        case TYPE_BOOLEAN:
        case TYPE_ARRAY:
        case IDENTIFIER:
        case LPAREN:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public While WhileLoop() throws ParseException {/*@bgen(jjtree) WhileLoop */
    SimpleNode jjtn000 = new SimpleNode(JJTWHILELOOP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);List<IASTStatement> stmts;
    IASTExpr expr;
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expr = Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LCURLY);
      stmts = Statements();
      jj_consume_token(RCURLY);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return new While(expr, stmts);}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public For ForLoop() throws ParseException {/*@bgen(jjtree) ForLoop */
    SimpleNode jjtn000 = new SimpleNode(JJTFORLOOP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);List<IASTStatement> stmts;
    IASTExpr expr;
    Token t;
    try {
      jj_consume_token(FOR);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(IN);
      jj_consume_token(RANGE);
      expr = Expression();
      jj_consume_token(LCURLY);
      stmts = Statements();
      jj_consume_token(RCURLY);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return new For(new Identifier(t.image), expr, stmts);}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTStatement Print() throws ParseException {/*@bgen(jjtree) Print */
    SimpleNode jjtn000 = new SimpleNode(JJTPRINT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTExpr e;
    try {
      e = Expression();
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
{if ("" != null) return new Print(e);}
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpr Expression() throws ParseException {/*@bgen(jjtree) Expression */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTExpr e;
    try {
      e = ConditionalExpression();
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
{if ("" != null) return e;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpr ConditionalExpression() throws ParseException {/*@bgen(jjtree) ConditionalExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONALEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTExpr result, b;
    try {
      result = AdditiveExpression();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GREATER_THAN:
        case LESS_THAN:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LESS_THAN:{
          jj_consume_token(LESS_THAN);
          b = AdditiveExpression();
result = new LessThan(result, b);
          break;
          }
        case GREATER_THAN:{
          jj_consume_token(GREATER_THAN);
          b = AdditiveExpression();
result = new GreaterThan(result, b);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpr AdditiveExpression() throws ParseException {/*@bgen(jjtree) AdditiveExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTExpr result, b;
    try {
      result = MultiplicativeExpression();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case SUB:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
          b = MultiplicativeExpression();
result = new Plus(result, b);
          break;
          }
        case SUB:{
          jj_consume_token(SUB);
          b = MultiplicativeExpression();
result = new Sub(result, b);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpr MultiplicativeExpression() throws ParseException {/*@bgen(jjtree) MultiplicativeExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTExpr result, b;
    try {
      result = ArrayIndexExpression();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULT:
        case DIV:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULT:{
          jj_consume_token(MULT);
          b = ArrayIndexExpression();
result = new Mult(result, b);
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
          b = ArrayIndexExpression();
result = new Div(result, b);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpr ArrayIndexExpression() throws ParseException {/*@bgen(jjtree) ArrayIndexExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTARRAYINDEXEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTExpr result;
    IASTExpr index;
    List<IASTExpr> indices = new LinkedList<IASTExpr>();
    try {
      result = AtomicExpression();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACK:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        jj_consume_token(LBRACK);
        index = Expression();
indices.add(index);
        jj_consume_token(RBRACK);
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if(indices.isEmpty())
        {
            {if ("" != null) return result;}
        }
        else
        {
            {if ("" != null) return new ArrayIndex(result, indices);}
        }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTExpr AtomicExpression() throws ParseException {/*@bgen(jjtree) AtomicExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTATOMICEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTExpr e;
    Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        t = jj_consume_token(INTEGER_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
{if ("" != null) return new Int(Integer.parseInt(t.image));}
        break;
        }
      case DOUBLE_LITERAL:{
        t = jj_consume_token(DOUBLE_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
{if ("" != null) return new Dble(Double.parseDouble(t.image));}
        break;
        }
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
{if ("" != null) return new Identifier(t.image);}
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
{if ("" != null) return new Bool(true);}
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
{if ("" != null) return new Bool(false);}
        break;
        }
      case TYPE_INT:
      case TYPE_DOUBLE:
      case TYPE_BOOLEAN:
      case TYPE_ARRAY:
      case LPAREN:{
        e = Array();
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
{if ("" != null) return e;}
        break;
        }
      case FUNC:{
        e = Function();
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
{if ("" != null) return e;}
        break;
        }
      case REC:{
        e = Record();
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
{if ("" != null) return e;}
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTStatement Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
    SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    IASTType x = null;
    List<IASTExpr> indices = new LinkedList <IASTExpr>();
    IASTExpr index;
    IASTExpr e = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TYPE_INT:
      case TYPE_DOUBLE:
      case TYPE_BOOLEAN:
      case TYPE_ARRAY:
      case LPAREN:{
        x = Type();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACK:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(LBRACK);
        index = Expression();
        jj_consume_token(RBRACK);
indices.add(index);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN_EQUALS:{
        jj_consume_token(ASSIGN_EQUALS);
        e = Expression();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
if(x == null && e == null)
     {
        {if (true) throw new ParseException("You done goofed, GL");}
     }
     else if(x != null && e == null)
     {
        {if ("" != null) return new Declaration(x, new Identifier(t.image), indices);}
     }
     else if(x == null && e != null)
     {
        {if ("" != null) return new Assignment(new Identifier(t.image), e, indices);}
     }
     else
     {
        {if ("" != null) return new DeclareAssign(x, new Identifier(t.image), e, indices);}
     }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTType FunctionType() throws ParseException {/*@bgen(jjtree) FunctionType */
    SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTType t;
    IASTType result;
    try {
      result = Type();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ARROW:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        jj_consume_token(ARROW);
        t = Type();
{if ("" != null) return new TypeFunction(result, t);}
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTType Type() throws ParseException {/*@bgen(jjtree) Type */
    SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTType t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TYPE_INT:
      case TYPE_DOUBLE:
      case TYPE_BOOLEAN:
      case LPAREN:{
        t = AtomicType();
jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
{if ("" != null) return t;}
        break;
        }
      case TYPE_ARRAY:{
        jj_consume_token(TYPE_ARRAY);
        t = Type();
jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
{if ("" != null) return new TypeArray(t);}
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte000;}
         }
         if (jjte000 instanceof ParseException) {
           {if (true) throw (ParseException)jjte000;}
         }
         {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
    }
    throw new Error("Missing return statement in function");
  }

  static final public IASTType AtomicType() throws ParseException {/*@bgen(jjtree) AtomicType */
     SimpleNode jjtn000 = new SimpleNode(JJTATOMICTYPE);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);IASTType t;
     Token ident;
     List<IASTType> args = new LinkedList<IASTType>();
     List<Identifier> idents = new LinkedList<Identifier>();
     Map<Identifier, IASTType> record = new HashMap<Identifier, IASTType>();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TYPE_INT:{
        jj_consume_token(TYPE_INT);
jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
{if ("" != null) return TypeInt.INT;}
        break;
        }
      case TYPE_DOUBLE:{
        jj_consume_token(TYPE_DOUBLE);
jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
{if ("" != null) return TypeDouble.DOUBLE;}
        break;
        }
      case TYPE_BOOLEAN:{
        jj_consume_token(TYPE_BOOLEAN);
jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
{if ("" != null) return TypeBoolean.BOOLEAN;}
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        t = Type();
        ident = jj_consume_token(IDENTIFIER);
args.add(t); idents.add(new Identifier(ident.image));
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            break label_8;
          }
          jj_consume_token(COMMA);
          t = Type();
          ident = jj_consume_token(IDENTIFIER);
args.add(t); idents.add(new Identifier(ident.image));
        }
        jj_consume_token(RPAREN);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
Iterator<Identifier> it1 = idents.iterator();
         Iterator<IASTType> it2 = args.iterator();
         while(it1.hasNext() && it2.hasNext())
         {
            record.put(it1.next(), it2.next());
         }

         {if ("" != null) return new TypeRecord(record);}
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

// Do this as an assignment
  static final public Array Array() throws ParseException {/*@bgen(jjtree) Array */
    SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTExpr e;
    IASTType t;
    List<IASTExpr> rhs = new LinkedList<IASTExpr>();
    try {
      t = Type();
      jj_consume_token(LPAREN);
      e = Expression();
rhs.add(e);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        e = Expression();
rhs.add(e);
      }
      jj_consume_token(RPAREN);
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return new Array(t, rhs);}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public DoWhile DoWhileLoop() throws ParseException {/*@bgen(jjtree) DoWhileLoop */
    SimpleNode jjtn000 = new SimpleNode(JJTDOWHILELOOP);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);List<IASTStatement> stmts;
    IASTExpr expr;
    try {
      jj_consume_token(DO);
      jj_consume_token(LCURLY);
      stmts = Statements();
      jj_consume_token(RCURLY);
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expr = Expression();
      jj_consume_token(RPAREN);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return new DoWhile(expr, stmts);}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public If If() throws ParseException {/*@bgen(jjtree) If */
    SimpleNode jjtn000 = new SimpleNode(JJTIF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);List<IASTStatement> stmts;
    IASTExpr condt;
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      condt = Expression();
      jj_consume_token(RPAREN);
      jj_consume_token(LCURLY);
      stmts = Statements();
      jj_consume_token(RCURLY);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return new If(condt, stmts);}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Record Record() throws ParseException {/*@bgen(jjtree) Record */
    SimpleNode jjtn000 = new SimpleNode(JJTRECORD);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);// Can compute the type of the record based on whats in there
    // int a := 12, int b := 15; etc
    List<IASTStatement> assigns = new LinkedList<IASTStatement>();
    IASTStatement stmt;
    try {
      jj_consume_token(REC);
      jj_consume_token(LPAREN);
      stmt = Assignment();
assigns.add(stmt);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TYPE_INT:
        case TYPE_DOUBLE:
        case TYPE_BOOLEAN:
        case TYPE_ARRAY:
        case IDENTIFIER:
        case LPAREN:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        stmt = Assignment();
assignts.add(stmt);
      }
      jj_consume_token(RPAREN);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return new Record(assigns);}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Function Function() throws ParseException {/*@bgen(jjtree) Function */
    SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IASTType def;
    List<IASTStatement> stmts;
    try {
      jj_consume_token(FUNC);
      def = FunctionType();
      jj_consume_token(LCURLY);
      stmts = Statements();
      jj_consume_token(RCURLY);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return new Function(def, stmts);}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Return Return() throws ParseException {/*@bgen(jjtree) Return */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);// Every function needs to have a return statement, at least one, that matches the functions
    // return type, so that's where I get the return type from
   // What is this though? A return

    try {
      jj_consume_token(RETURN);
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_13()
 {
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_scan_token(ASSIGN_EQUALS)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_11()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_scan_token(TYPE_ARRAY)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_13()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_scan_token(TYPE_BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(TYPE_DOUBLE)) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(TYPE_INT)) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public GubbinsTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3260,0x7c3260,0x0,0x0,0x48000000,0x48000000,0x30000000,0x30000000,0x0,0x67d4180,0x3c0000,0x0,0x80000000,0x8000,0x3c0000,0x0,0x1c0000,0x0,0x7c0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x8,0xa00,0xa00,0x0,0x0,0x0,0x0,0x80,0x8,0x8,0x80,0x0,0x0,0x8,0x20,0x8,0x20,0x8,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gubbins(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gubbins(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GubbinsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gubbins(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GubbinsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gubbins(GubbinsTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GubbinsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
