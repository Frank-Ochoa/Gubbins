/* Generated By:JJTree&JavaCC: Do not edit this line. GubbinsConstants.java */
package Gubbins.Parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GubbinsConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHILE = 5;
  /** RegularExpression Id. */
  int IF = 6;
  /** RegularExpression Id. */
  int TRUE = 7;
  /** RegularExpression Id. */
  int FALSE = 8;
  /** RegularExpression Id. */
  int FOR = 9;
  /** RegularExpression Id. */
  int IN = 10;
  /** RegularExpression Id. */
  int RANGE = 11;
  /** RegularExpression Id. */
  int PRINT = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int FUNC = 14;
  /** RegularExpression Id. */
  int ARROW = 15;
  /** RegularExpression Id. */
  int REC = 16;
  /** RegularExpression Id. */
  int TYPE_INT = 17;
  /** RegularExpression Id. */
  int TYPE_DOUBLE = 18;
  /** RegularExpression Id. */
  int TYPE_BOOLEAN = 19;
  /** RegularExpression Id. */
  int TYPE_ARRAY = 20;
  /** RegularExpression Id. */
  int IDENTIFIER = 21;
  /** RegularExpression Id. */
  int LETTER = 22;
  /** RegularExpression Id. */
  int DIGIT = 23;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 24;
  /** RegularExpression Id. */
  int DOUBLE_LITERAL = 25;
  /** RegularExpression Id. */
  int PLUS = 26;
  /** RegularExpression Id. */
  int MULT = 27;
  /** RegularExpression Id. */
  int DIV = 28;
  /** RegularExpression Id. */
  int SUB = 29;
  /** RegularExpression Id. */
  int ASSIGN_EQUALS = 30;
  /** RegularExpression Id. */
  int SEMI = 31;
  /** RegularExpression Id. */
  int LCURLY = 32;
  /** RegularExpression Id. */
  int RCURLY = 33;
  /** RegularExpression Id. */
  int LPAREN = 34;
  /** RegularExpression Id. */
  int RPAREN = 35;
  /** RegularExpression Id. */
  int COMMA = 36;
  /** RegularExpression Id. */
  int DOT = 37;
  /** RegularExpression Id. */
  int LBRACK = 38;
  /** RegularExpression Id. */
  int RBRACK = 39;
  /** RegularExpression Id. */
  int GREATER_THAN = 40;
  /** RegularExpression Id. */
  int GREATER_THAN_EQTO = 41;
  /** RegularExpression Id. */
  int LESS_THAN = 42;
  /** RegularExpression Id. */
  int LESS_THAN_EQTO = 43;
  /** RegularExpression Id. */
  int EQ_TO = 44;
  /** RegularExpression Id. */
  int NOT_EQ_TO = 45;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"while\"",
    "\"if\"",
    "\"true\"",
    "\"false\"",
    "\"for\"",
    "\"in\"",
    "\"range\"",
    "\"print\"",
    "\"do\"",
    "\"func\"",
    "\"->\"",
    "\"rec\"",
    "\"int\"",
    "\"double\"",
    "\"bool\"",
    "\"arr\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INTEGER_LITERAL>",
    "<DOUBLE_LITERAL>",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"-\"",
    "\":=\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\".\"",
    "\"[\"",
    "\"]\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"=\"",
    "\"!=\"",
  };

}
