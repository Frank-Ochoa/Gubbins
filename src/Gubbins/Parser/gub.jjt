PARSER_BEGIN(Gubbins)

package Gubbins.Parser;
import ast.*;
import java.util.LinkedList;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.Iterator;
import java.util.List;

public class Gubbins
{
}

PARSER_END(Gubbins)


SKIP :    //what in our programming lang can be treated as white space
	  //this says skip spaces or tabs or next lines   | = or
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN : /* RESERVED WORDS*/
{
        <WHILE : "while">
    |   <IF : "if">
    |   <TRUE: "true" >
    |   <FALSE: "false" >
    |   <FOR: "for" >
    |   <IN: "in" >
    |   <RANGE: "range" >
    |   <PRINT: "print" >
    |   <DO:    "do" >
    |   <FUNC: "func" >
    |   <ARROW: "->">
    |   <REC:   "rec">
    |   <RETURN: "return">
    |   <NEW: "new">
}

TOKEN : /* TYPES */
{
        <TYPE_INT : "int">
    |   <TYPE_DOUBLE: "double">
    |   <TYPE_BOOLEAN: "bool">
    |   <TYPE_ARRAY : "arr" >
    |   <TYPE_OBJECT: "object">
}

TOKEN : /* IDENTIFIERS */ //a token is one unit of information
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* > //this says an ID has to start with a 						        letter followed by 0 or more letters or 						digits
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

TOKEN : /* LITERALS */
{
        < INTEGER_LITERAL:  (<DIGIT>)+ >    //careful with * and +
   |    < DOUBLE_LITERAL: <INTEGER_LITERAL> "." <INTEGER_LITERAL> >
}



TOKEN : /* OPERATORS*/
{
        <PLUS : "+">
    |   <MULT : "*">
    |   <DIV : "/">
    |   <MOD: "%">
    |   <SUB : "-">
    |   <ASSIGN_EQUALS : ":=">
    |   <SEMI : ";">
    |   <LCURLY : "{">
    |   <RCURLY : "}">
    |   <LPAREN : "(" >
    |   <RPAREN : ")" >
    |   <COMMA : "," >
    |   <DOT :  "." >
    |   <LBRACK: "[">
    |   <RBRACK: "]">
}


TOKEN : /* BOOLEAN CONDITIONALS */
{
	<GREATER_THAN : ">" >
	|
	<GREATER_THAN_EQTO : ">=" >
	|
	<LESS_THAN : "<" >
	|
	<LESS_THAN_EQTO : "<=" >
	|
	<EQ_TO : "=" >
	|
	<NOT_EQ_TO : "!=" >
	|
	<AND : "&" >
	|
	<OR : "|" >
}

/** Top level production. */
List<IASTStatement> Input() :
{
    List<IASTStatement> result;
}
{
    result = Statements()
    <EOF>
    { return result; }
}

IASTStatement Statement() :
{
    IASTStatement s;
}
{
    LOOKAHEAD(2)

	        s = Assignment()  <SEMI>  { return s; }
            |   <PRINT> s = Print() <SEMI>          { return s; }
            |   s = DoWhileLoop()            { return s; }
            |   s = ForLoop()              { return s; }
            |   s = WhileLoop()         { return s; }
            |   s = If()                { return s; }
}

List<IASTStatement> Statements() :
{
    IASTStatement s;
    LinkedList<IASTStatement> result = new LinkedList<IASTStatement>();
}
{
    (s = Statement() { result.add(s); })+
    { return result; }
}

IASTStatement FunctionStatement() :
{
    IASTStatement s;
}
{
    LOOKAHEAD(2)

	        s = Assignment()  <SEMI>  { return s; }
            |   <PRINT> s = Print() <SEMI>          { return s; }
            |   s = DoWhileLoop()            { return s; }
            |   s = ForLoop()              { return s; }
            |   s = WhileLoop()         { return s; }
            |   s = If()                { return s; }
            |   s = Return() <SEMI>            {return s; }
}

List<IASTStatement> FunctionStatements() :
{
    IASTStatement s;
    LinkedList<IASTStatement> result = new LinkedList<IASTStatement>();
}
{
    (s = FunctionStatement() { result.add(s); })+
    { return result; }
}

Return Return() :
{
    // Every function needs to have a return statement, at least one, that matches the functions
    // return type, so that's where I get the return type from
   // What is this though? A return key word followed by an expression
   IASTExpr expr;
}
{
   <RETURN> expr = Expression()

   {return new Return(expr);}
}

While WhileLoop() :
{
    List<IASTStatement> stmts;
    IASTExpr expr;
}
{
    <WHILE> <LPAREN> expr = Expression() <RPAREN>
    <LCURLY>
        stmts = FunctionStatements()
    <RCURLY>
    { return new While(expr, stmts); }
}

For ForLoop() :
{
    List<IASTStatement> stmts;
    IASTExpr expr;
    Token t;
}
{
    <FOR> t = <IDENTIFIER> <IN> <RANGE> expr = Expression()
    <LCURLY>
        stmts = FunctionStatements()
    <RCURLY>
    { return new For(new Identifier(t.image), expr, stmts); }
}

IASTStatement Print() :
{
    IASTExpr e;
}
{
	 e = Expression()
	{ return new Print(e); }
}

IASTExpr Expression() :
{
    IASTExpr e;
    IASTExpr b;
}
{
    e = ConditionalExpression()
    (
       <AND> b = ConditionalExpression() {e = new And(e, b);}
      | <OR> b = ConditionalExpression() {e = new Or(e, b);}

    )*

     { return e; }
}

IASTExpr ConditionalExpression() :
{
    IASTExpr result, b;
}
{
    result = AdditiveExpression()
    (
        <LESS_THAN> b = AdditiveExpression() {result = new LessThan(result, b);}
        | <GREATER_THAN> b = AdditiveExpression() {result = new GreaterThan(result, b);}
        | <LESS_THAN_EQTO> b = AdditiveExpression() {result = new LessThanEQ(result, b);}
        | <GREATER_THAN_EQTO> b = AdditiveExpression() {result = new GreaterThanEQ(result, b);}
        | <EQ_TO> b = AdditiveExpression() {result = new EQ(result, b);}
        | <NOT_EQ_TO> b = AdditiveExpression() {result = new NotEQ(result, b);}

        // And can do other conditionals under this if need be
    )*

    {return result;}
}

IASTExpr AdditiveExpression() :
{
    IASTExpr result, b;
}
{
    result = MultiplicativeExpression()
    (

            <PLUS> b = MultiplicativeExpression() {result = new Plus(result, b);}
        |    <SUB> b = MultiplicativeExpression() {result = new Sub(result, b);}

    )*
    { return result; }
}

IASTExpr MultiplicativeExpression() :
{
    IASTExpr result, b;
}
{
    result = RecordAccessExpression()
    (
           <MULT> b = RecordAccessExpression() {result = new Mult(result, b);}
        |  <DIV>  b = RecordAccessExpression() {result = new Div(result, b); }
        |  <MOD> b = RecordAccessExpression() {result = new Mod(result, b);}

    )*
    { return result; }
}

IASTExpr RecordAccessExpression () :
{
    IASTExpr result;
    Token index;
}
{
    result = ArrayIndexExpression()
     (
        <DOT> index = <IDENTIFIER> {result = new RecordAccess(result, index.image);}
     )?
    { return result;}
}

IASTExpr ArrayIndexExpression() :
{
    IASTExpr result;
    IASTExpr index;
    List<IASTExpr> indices = new LinkedList<IASTExpr>();
}
{
    result = FunctionCallExpresion()
    (
        <LBRACK> index = Expression() {indices.add(index);} <RBRACK>
    )*

    {
        if(indices.isEmpty())
        {
            return result;
        }
        else
        {
            return new ArrayIndex(result, indices);
        }
    }

}

IASTExpr FunctionCallExpresion() :
{
    IASTExpr result;
    IASTExpr argVal;
    List<IASTExpr> argValues = new LinkedList<IASTExpr>();
}
{
    result = AtomicExpression()
    (
       <LPAREN> argVal = Expression() {argValues.add(argVal);} (<COMMA> argVal = Expression() {argValues.add(argVal);})* <RPAREN>
       {return new FunctionCall(result, argValues);}
    )?

    {return result;}
}

IASTExpr AtomicExpression() :
{
    IASTExpr e;
    Token t;
}
{
    LOOKAHEAD(1)
        t = <INTEGER_LITERAL>   { return new Int(Integer.parseInt(t.image)); }
    |   t = <DOUBLE_LITERAL>    { return new Dble(Double.parseDouble(t.image)); }
    |   t = <IDENTIFIER>        { return new Identifier(t.image); }
    |   <TRUE>                  { return new Bool(true); }
    |   <FALSE>                 { return new Bool(false); }
    |  e = Array()              { return e; }
    |  e = Function()           { return e; }
    |  e = Record()             { return e; }
}

IASTStatement Assignment() :
{
    Token t;
    IASTType x = null;
    List<IASTExpr> indices = new LinkedList <IASTExpr>();
    IASTExpr index;
    IASTExpr e = null;
}
{
   (x = FunctionType())? t = <IDENTIFIER> (<LBRACK> index = Expression() <RBRACK> { indices.add(index); })*  (<ASSIGN_EQUALS> e = Expression())?
   {
     if(x == null && e == null)
     {
        throw new ParseException("You done goofed, GL");
     }
     else if(x != null && e == null)
     {
        return new Declaration(x, new Identifier(t.image), indices);
     }
     else if(x == null && e != null)
     {
        return new Assignment(new Identifier(t.image), e, indices);
     }
     else
     {
        return new DeclareAssign(x, new Identifier(t.image), e, indices);
     }
   }
}

IASTType FunctionType() :
{
    IASTType t;
    IASTType result;
}
{
    result = Type()
    (
        <ARROW> t = Type() {return new TypeFunction(result, t);}
    )*

    {return result;}
}

IASTType Type() :
{
    IASTType t;
}
{
     t = AtomicType()   {return t;}
     | <TYPE_ARRAY>  <LPAREN> t = FunctionType() <RPAREN>    {return new TypeArray(t);}
}


IASTType AtomicType() :
{
     IASTType t;
     Token ident;
     List<IASTType> args = new LinkedList<IASTType>();
     List<Identifier> idents = new LinkedList<Identifier>();
     Map<Identifier, IASTType> record = new LinkedHashMap<Identifier, IASTType>();
}
{
         <TYPE_INT>               {return TypeInt.INT;}
    |    <TYPE_DOUBLE>            {return TypeDouble.DOUBLE;}
    |    <TYPE_BOOLEAN>           {return TypeBoolean.BOOLEAN;}
    | <LPAREN> t = FunctionType() ident = <IDENTIFIER> {args.add(t); idents.add(new Identifier(ident.image));}
         (<COMMA> t = FunctionType() ident = <IDENTIFIER> {args.add(t); idents.add(new Identifier(ident.image));})* <RPAREN>
         {

         Iterator<Identifier> it1 = idents.iterator();
         Iterator<IASTType> it2 = args.iterator();
         while(it1.hasNext() && it2.hasNext())
         {
            record.put(it1.next(), it2.next());
         }

         return new TypeRecord(record);
         }
}

// Do this as an assignment
Array Array() :
{
    IASTExpr e;
    IASTType t;
    List<IASTExpr> rhs = new LinkedList<IASTExpr>();
}
{
   t = Type() <LPAREN> e = Expression() { rhs.add(e); } (<COMMA> e = Expression() {rhs.add(e);})* <RPAREN>

   {return new Array(t, rhs);}
}

DoWhile DoWhileLoop() :
{
    List<IASTStatement> stmts;
    IASTExpr expr;
}
{
    <DO>
    <LCURLY>
        stmts = FunctionStatements()
    <RCURLY>
    <WHILE> <LPAREN> expr = Expression() <RPAREN>
    {return new DoWhile(expr, stmts);}
}

If If() :
{
    List<IASTStatement> stmts;
    IASTExpr condt;
}
{
    <IF> <LPAREN> condt = Expression() <RPAREN>
    <LCURLY>
        stmts = FunctionStatements()
    <RCURLY>

    {return new If(condt, stmts);}
}

Record Record() :
{
    // Can compute the type of the record based on whats in there
    // int a := 12, int b := 15; etc
    List<IASTStatement> assigns = new LinkedList<IASTStatement>();
    IASTStatement stmt;
}
{
    <REC> <LPAREN> stmt = Assignment() {assigns.add(stmt);} (<COMMA> stmt = Assignment() {assigns.add(stmt);})* <RPAREN>
    {return new Record(assigns);}
}

Function Function() :
{
    IASTType def;
    List<IASTStatement> stmts;
}
{
   <FUNC> def = FunctionType()
    <LCURLY>
        stmts = FunctionStatements()
    <RCURLY>

    {return new Function(def, stmts);}
}









